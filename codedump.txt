remember to correctly format the code so that subfunctions are in line with the code of the functions


What's the difference between these two instructions? 
		move $t0, $s0
		la $t0, ($s0)

		
		
		
		
	bgt $s3, $s1, rightcheck
	nopegoback:

	rightcheck:
	#move $s0, $a0 # address sorted list
	#move $s1, $a1 # size/right
	#move $s2, $a2 # search key
	#move $s3, $a3 # left
		sll $t6, $s1, 2
		add $t6, $s0, $t6
		lw $t7, ($t6)
		beq $a2, $t7, btrue
		
	j nopegoback
		
		


.data 

original_list: .space 100 
sorted_list: .space 100

str0: .asciiz "Enter size of list (between 1 and 25): "
str1: .asciiz "Enter one list element: \n"
str2: .asciiz "Content of list: "
str3: .asciiz "Enter a key to search for: "
strYes: .asciiz "Key found!"
strNo: .asciiz "Key not found!"

commaSpace: .asciiz " "
newLine: .asciiz "\n"

.text 

#This is the main program.
#It first asks user to enter the size of a list.
#It then asks user to input the elements of the list, one at a time.
#It then calls printList to print out content of the list.
#It then calls inSort to perform insertion sort
#It then asks user to enter a search key and calls bSearch on the sorted list.
#It then prints out search result based on return value of bSearch
main: 
	addi $sp, $sp -8
	sw $ra, 0($sp)
	li $v0, 4 
	la $a0, str0 
	syscall 
	li $v0, 5	#Read size of list from user
	syscall
	move $s0, $v0
	move $t0, $0
	la $s1, original_list
loop_in:
	li $v0, 4 
	la $a0, str1 
	syscall 
	sll $t1, $t0, 2
	add $t1, $t1, $s1
	li $v0, 5	#Read elements from user
	syscall
	sw $v0, 0($t1)
	addi $t0, $t0, 1
	bne $t0, $s0, loop_in
	
	li $v0, 4 
	la $a0, str2 
	syscall 
	move $a0, $s1
	move $a1, $s0
	jal printList	#Call print original list
	
	jal inSort	#Call inSort to perform insertion sort in original list
	sw $v0, 4($sp)
	li $v0, 4 
	la $a0, str2 
	syscall 
	lw $a0, 4($sp)
	jal printList	#Print sorted list
	
	li $v0, 4 
	la $a0, str3 
	syscall 
	li $v0, 5	#Read search key from user
	syscall
	move $a2, $v0
	lw $a0, 4($sp)
	jal bSearch	#Call bSearch to perform binary search
	
	beq $v0, $0, notFound
	li $v0, 4 
	la $a0, strYes 
	syscall 
	j end
	
notFound:
	li $v0, 4 
	la $a0, strNo 
	syscall 
end:
	lw $ra, 0($sp)
	addi $sp, $sp 8
	li $v0, 10 
	syscall
	
	
#printList takes in a list and its size as arguments. 
#It prints all the elements in one line.
printList:
	#Your implementation of printList here	
	addi $sp, $sp -4
	sw $ra, 0($sp)
	
	#a0 is the address of the array
	#a1 is the size of the array
	
	move $t0, $a0 # moves address of array into s0
	move $t1, $a1 # a1 = size of array. s1 used as i
	
	ploop:
	#beq $t1, $zero, pend # if i > 0 then loop
	
	lw $a0, 0($t0)
	li $v0, 1
	syscall
	
	addi $t0, $t0, 4 # TODO make this more eloquent
	addi $t1, $t1, -1

	beq $t1, $zero, pend # if t1 = 0, breaks before printing comma
	j printComma

printComma: #prints a space
	la $t2, commaSpace
	move $a0, $t2
	li $v0, 4
	syscall
	
	j ploop
pend:
	la $t2, newLine
	move $a0, $t2
	li $v0, 4
	syscall	

	lw $ra, 0($sp) #restore $ra
	addi $sp, $sp 4
	
	jr $ra	

#inSort takes in a list and it size as arguments. 
#It performs INSERTION sort in ascending order and returns a new sorted list
#You may use the pre-defined sorted_list to store the result
inSort:
	#Your implementation of inSort here
	addi $sp, $sp, -32
	sw $ra, 8($sp)
	sw $s0, 12($sp)
	sw $s1, 16($sp)
	sw $s2, 20($sp)
	sw $s3, 24($sp)
	sw $s4, 28($sp)
	
	#init
	move $s0, $a0 # address of original array
	move $s1, $a1 # size of array
	li $s2, 1 # sets i = 1
	
	iloop:
	beq $s2, $s1, iend # if i = arraySize then end
	
	la $t0, 0($s0) # address of original array
	sll $t2, $s2, 2 # muliplies i by 4
	add $t3, $t0, $t2 # t3 = array[i], in other words t3 = address if original array + offset
	lw $s3, 0($t3) #TODO 0 # s3 = dereferenced array[i]
	addi $s4, $s2, -1 # j = i - 1
	
		jloop:
		addi $t0, $s4, 1 
		beq $t0, $zero, jend # if j = 0 then jend
		move $a0, $s3
	
		la $t0, 0($s0) # TODO 0
		sll $t2, $s4, 2
		add $t3, $t0, $t2 # t3 = array[j]
		lw $a1, 0($t3) #TODO 0, value of array[j] as argument
		jal stringlt
		move $t0, $v0
		beq $t0, $zero, jend #if true, end
		addi $t1, $s4, 1 # if not, j++
		beq $t1, $zero, jend #TODO THIS IS A DUPLICATE NOT SURE IF NEEDED if true, end
		
		la $t0, 0($s0) #TODO 0 #TODO TRY TO OPTIMIZE THE FUNCTION, WE'RE REPEATING CODE
		sll $t2, $s4, 2 
		add $t3, $t0, $t2
		lw $t4, 0($t3) #TODO 0 #TODO remove this comment, t4 is used for later
		
		move $t0, $s0
		addi $t2, $s4, 1 # j++
		sll $t3, $t2, 2
		add $t1, $t3, $t0 # TODO rewrite comment "gets address from data"
		sw $t4, 0($t1) # array[j] = array[j+1]
		
		addi $s4, $s4, -1 # j--
		j jloop
		
		jend:
		move $t0, $s0
		sll $t2, $s4, 2
		add $t1, $t4, $t0
		sw $s3, 0($t1) #TODO 0 #s3 = array[j+1]
		addi $s2, $s2, 1 #i++
		j iloop
	iend:
	lw $ra, 8($sp)
	lw $s0, 12($sp)
	lw $s1, 16($sp)
	lw $s2, 20($sp)
	lw $s3, 24($sp)
	lw $s4, 28($sp)
	addi $sp, $sp, 32
	
	la $v0, sorted_list # returns the address of the sorted array
	jr $ra

	
	
	
#string less than function: returns true if less than, false if greater than
stringlt: 

	move $t0, $a0
	move $t1, $a1


	sltloop:
	lb $t2, 0($t0) #TODO lb vs lw and 0($t0)
	lb $t3, 0($t1)

	
	and $t4, $t2, $t3 # checks if null terminator
	beq $t4, $zero, stringend
	blt $t2, $t3, iflt # jumps to less than if t0 < t1
	bgt $t2, $t3, ifgt # jumps to greater than if t0 > t1
	addi $t0, $t0, 1 # increments t0
	addi $t1, $t1, 1 # increments t0
	j sltloop
	
	
	stringend:
	beq $t2, $zero, iflt # checks if x = 0
	j ifgt # returns false

	ifgt: # returns false
	li $v0, 0
	j sltend

	iflt: # returns true
	li $v0, 1
	j sltend	


	sltend:
	jr $ra
	
	
#bSearch takes in a list, its size, and a search key as arguments.
#It performs binary search RECURSIVELY to look for the search key.
#It will return a 1 if the key is found, or a 0 otherwise.
#Note: you MUST NOT use iterative approach in this function.
bSearch:
	#Your implementation of bSearch here
	
	jr $ra
	
